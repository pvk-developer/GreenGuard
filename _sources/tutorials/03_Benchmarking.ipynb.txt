{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging;\n",
    "\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logging.getLogger().setLevel(level=logging.ERROR)\n",
    "logging.getLogger('greenguard').setLevel(level=logging.INFO)\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['unstack_double_lstm_timeseries_classifier',\n",
       " 'unstack_lstm_timeseries_classifier']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from greenguard import get_pipelines\n",
    "\n",
    "get_pipelines('lstm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from greenguard.benchmark import evaluate_templates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-08-05 17:14:08,860 - INFO - greenguard.pipeline - New configuration found:\n",
      "  Template: unstack_lstm_timeseries_classifier \n",
      "    Hyperparameters: \n",
      "      ('sklearn.impute.SimpleImputer#1', 'strategy'): mean\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'lstm_1_units'): 80\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dropout_1_rate'): 0.3\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dense_1_units'): 80\n",
      "2020-08-05 17:14:16,974 - INFO - greenguard.pipeline - New configuration found:\n",
      "  Template: unstack_lstm_timeseries_classifier \n",
      "    Hyperparameters: \n",
      "      ('sklearn.impute.SimpleImputer#1', 'strategy'): constant\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'lstm_1_units'): 397\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dropout_1_rate'): 0.38706239055719976\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dense_1_units'): 367\n",
      "2020-08-05 17:14:36,898 - INFO - greenguard.pipeline - New configuration found:\n",
      "  Template: unstack_lstm_timeseries_classifier \n",
      "    Hyperparameters: \n",
      "      ('sklearn.impute.SimpleImputer#1', 'strategy'): most_frequent\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'lstm_1_units'): 90\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dropout_1_rate'): 0.7472037016839137\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dense_1_units'): 215\n",
      "2020-08-05 17:15:00,145 - INFO - greenguard.pipeline - New configuration found:\n",
      "  Template: unstack_lstm_timeseries_classifier \n",
      "    Hyperparameters: \n",
      "      ('sklearn.impute.SimpleImputer#1', 'strategy'): mean\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'lstm_1_units'): 80\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dropout_1_rate'): 0.3\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dense_1_units'): 80\n",
      "2020-08-05 17:15:14,558 - INFO - greenguard.pipeline - New configuration found:\n",
      "  Template: unstack_lstm_timeseries_classifier \n",
      "    Hyperparameters: \n",
      "      ('sklearn.impute.SimpleImputer#1', 'strategy'): most_frequent\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'lstm_1_units'): 245\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dropout_1_rate'): 0.23326913705083852\n",
      "      ('keras.Sequential.LSTMTimeSeriesClassifier#1', 'dense_1_units'): 425\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>template</th>\n",
       "      <th>window_size</th>\n",
       "      <th>resample_rule</th>\n",
       "      <th>default_test</th>\n",
       "      <th>default_cv</th>\n",
       "      <th>tuned_cv</th>\n",
       "      <th>tuned_test</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>unstack_lstm_timeseries_classifier</td>\n",
       "      <td>1d</td>\n",
       "      <td>1h</td>\n",
       "      <td>0.603774</td>\n",
       "      <td>0.624928</td>\n",
       "      <td>0.638871</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>unstack_lstm_timeseries_classifier</td>\n",
       "      <td>3d</td>\n",
       "      <td>4h</td>\n",
       "      <td>0.708333</td>\n",
       "      <td>0.607978</td>\n",
       "      <td>0.640048</td>\n",
       "      <td>0.709677</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             template window_size resample_rule  default_test  \\\n",
       "0  unstack_lstm_timeseries_classifier          1d            1h      0.603774   \n",
       "1  unstack_lstm_timeseries_classifier          3d            4h      0.708333   \n",
       "\n",
       "   default_cv  tuned_cv  tuned_test status  \n",
       "0    0.624928  0.638871    0.666667     OK  \n",
       "1    0.607978  0.640048    0.709677     OK  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evaluate_templates(\n",
    "    templates=[\n",
    "        'unstack_lstm_timeseries_classifier',\n",
    "    ],\n",
    "    window_size_rule=[\n",
    "        ('1d', '1h'),\n",
    "        ('3d', '4h'),\n",
    "    ],\n",
    "    init_params={\n",
    "        'keras.Sequential.LSTMTimeSeriesClassifier#1': {\n",
    "            'epochs': 1,\n",
    "        }\n",
    "    },\n",
    "    tuning_iterations=3,\n",
    "    cv_splits=3,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
